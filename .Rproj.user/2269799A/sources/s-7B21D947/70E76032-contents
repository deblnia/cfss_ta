HW 4 Tips 
========================================================
author: Deblina Mukherjee
date: April 2019
autosize: true

What for loops look like conceptually 
========================================================
1. Pre-allocating space specifying data type of vector and it's length
2. Call for loop and specify element in list to iterate on 
3. Specify function and output
4. Create output 

What a for loop looks like practically
========================================================

```{r, results = "hide"}
output <- vector("double", ncol(iris))

for(i in seq_along(iris)){
  output[[i]] <- length(unique(iris[[i]]))
}

output

```


Subsetting Lists 
========================================================

![](subsetting.png)

Anonymous Functions 
========================================================

```{r}
map_int(iris, function(x) length(unique(x)))
```

Pythagorean Problem 
========================================================
* Conceptual Roadmap: 
  - Inputs: too many? too few? all numeric? 
  - Sort the inputs: what sides of the triangle do we have? 
  - Perform the operation (depending on what sides you have)
  
Pythagorean Problem (cont.)
========================================================
* Functions you may find helpful: 
  - ```sort()``` 
  - ```if()```
  - ```length()```
  - ```stop()```
  - ```else if()```
    
An example of the stop function
========================================================
```{r, results=hide}
x <- c("This is not numeric")

if(!is.numeric(x)){
    stop("At least one argument is not numeric. Only provide numbers.")
  }
```

